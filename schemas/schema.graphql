type Query {
        "Returns m first query"
        hello: String
        "Say hello"
        saludo: String
        "Retrieving all the courses in the DB"
        getCourses: [Course]
        "Retrieves an specific course"
        getCourse(id: ID): Course
        "Retrieving all the students in the DB"
        getPeople: [Person]
        "Retrieves an specific student"
        getPerson(id: ID!): Person
        "Returns all of the types"
        getItems(key: String!): [GlobalSearch]
    }

enum Level {
    beginner
    intermediate
    advanced
}
interface Person {
    _id: ID!
    name: String!
    email: String!
}

union GlobalSearch = Course | Student | Monitor

type Course {
    # Que son requeridos, no puede haber curso sin estos
    _id: ID!
    title: String!
    teacher: String
    description: String!
    topic: String
    people: [Student]
    level: Level
}

type Student implements Person {
    _id: ID!
    name: String!
    email: String!
    avatar: String
}

type Monitor implements Person {
    _id: ID!
    name: String!
    email: String!
    phone: String
}

# Aca es para crear, osea mutations e inputs
input CourseInput {
    title: String!
    teacher: String
    description: String
    topic: String
    level: Level
}

input CourseEditInput {
    title: String
    teacher: String
    description: String
    topic: String
}

input PersonInput {
    name: String!
    email: String!
    phone: String
    avatar: String
}

input PersonEditInput {
    name: String
    email: String
    phone: String
    avatar: String
}

type Mutation {
    "Creates a course"
    createCourse(input: CourseInput!): Course
    "Edits a course"
    editCourse(id: ID!, input: CourseEditInput): Course
    "Edits a student"
    editPerson(id: ID!, input: PersonEditInput): Person
    "Creates a student"
    createPerson(input: PersonInput!): Person
    "Adds a new student to a course"
    addPeople(courseId: ID!, personId: ID!): Course
}